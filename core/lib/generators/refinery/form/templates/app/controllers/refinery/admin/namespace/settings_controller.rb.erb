module Refinery
  module Admin
    module <%= class_name.pluralize %>
      class SettingsController < Refinery::AdminController

        before_action :find_setting, only: [:edit, :update]

        def update
          if params[:id] == 'confirmation_email'
            updated = update_confirmation_email
          else
            updated = @setting.update_attributes(setting_params)
          end

          if updated
            flash[:notice] = t('refinery.crudify.updated',
              kind: t('setting', scope: 'refinery.crudify'),
              what: t("#{@setting.name}"))

            redirect_back_or_default(refinery.admin_<%= namespacing.underscore %>_<%= plural_name %>_path)
          else
            render :edit
          end
        end

      protected

        def update_confirmation_email
          %w(subject message).each do |key|
            setting = Refinery::Setting.find_by(
              name: "confirmation_email_#{key}_#{Globalize.locale}",
              scoping: '<%= extension_name %>'
            )

            setting.update_attributes(value: params[:setting][:confirmation_email][key].to_s)
            setting.errors[:value].each do |error|
              @setting.errors[key] << error
            end if setting.errors.any?
          end

          !@setting.errors.any?
        end

        def find_setting
          case (id = params[:id].to_s)
          when 'confirmation_email'
            @setting = Refinery::Setting.new(name: id, slug: id, scoping: '<%= extension_name %>')
          else
            @setting = Refinery::Setting.find_by(name: id, scoping: '<%= extension_name %>')
          end

          @setting || error_404
        end

        def setting_params
          params.require(:setting).permit(:value)
        end

      end
    end
  end
end
