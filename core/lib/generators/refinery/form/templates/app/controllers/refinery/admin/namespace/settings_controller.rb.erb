module Refinery
  module <%= class_name.pluralize %>
    module Admin
      class SettingsController < Refinery::AdminController

        before_action :check_setting, only: [:edit, :update]
        after_action :save_subject_for_confirmation, :save_message_for_confirmation, only: :update

        def edit
          @setting = Refinery::Setting.find(params[:id].to_s)
        end

        def update
          @setting = Refinery::Setting.find(params[:id].to_s)

          if @setting.update_attributes(params[:setting])
            flash[:notice] = t('refinery.crudify.updated',
              kind: t('setting', scope: 'refinery.crudify'),
              what: @setting.name.gsub("<%= singular_name %>_", "").titleize)

            redirect_back_or_default(refinery.admin_<%= namespacing.underscore %>_<%= plural_name %>_path)
          end
        end

      protected
        def check_setting
          setting = params[:id].gsub('<%= singular_name %>_', '')

          Refinery::<%= namespacing %>::Setting.send(setting) if Refinery::<%= namespacing %>::Setting.respond_to?(setting)
        end

        def save_subject_for_confirmation
          Refinery::<%= namespacing %>::Setting.confirmation_subject = params[:subject] if params.keys.include?('subject')
        end

        def save_message_for_confirmation
          Refinery::<%= namespacing %>::Setting.confirmation_message = params[:message] if params.keys.include?('message')
        end

      end
    end
  end
end
