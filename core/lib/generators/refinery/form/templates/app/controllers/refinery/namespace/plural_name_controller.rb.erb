module Refinery
  module <%= class_name.pluralize %>
    class <%= class_name.pluralize %>Controller < ::ApplicationController

      before_action :find_page, only: [:create, :new]

      def index
        redirect_to action: :new
      end

      def thank_you
        @page = Page.includes(:parts).find_by(plugin_page_id: '<%= extension_name %>_thank_you')
      end

      def new
        @<%= singular_name %> = <%= class_name %>.new
      end

      def create
        @<%= singular_name %> = <%= class_name %>.new(<%= singular_name %>_params)

        if @<%= singular_name %>.save
          begin
            Mailer.notification(@<%= singular_name %>).deliver
          rescue => e
            logger.warn "There was an error delivering the <%= singular_name %> notification.\n#{e.message}\n"
          end<% if includes_spam? %> if @<%= singular_name %>.ham?<% end %>

          if <%= class_name %>.column_names.map(&:to_s).include?('email')
            begin
              Mailer.confirmation(@<%= singular_name %>).deliver
            rescue => e
              logger.warn "There was an error delivering the <%= singular_name %> confirmation:\n#{e.message}\n"
            end<% if includes_spam? %> if @<%= singular_name %>.ham?<% end %>
          else
            logger.warn "Please add an 'email' field to <%= class_name %> if you wish to send confirmation emails when forms are submitted."
          end

          redirect_to refinery.url_for((thank_you_page || page).url), status: :see_other
        else
          render action: :new
        end
      end

    protected

      def find_page
        @page = Page.includes(:parts).find_by(plugin_page_id: '<%= extension_name %>')
      end
      alias_method :page, :find_page

      def thank_you_page
        @thank_you_page ||= refinery_plugin.thank_you_page
      end

    private

      def <%= singular_name %>_params
        params.require(:<%= singular_name %>).permit(<%= [].tap do |a|
          attributes.each.each do |attribute|
            if [:image, :resource].include?(attribute.type)
              a << ":#{attribute.name}_id".gsub("_id_id", "_id")
            else
              a << ":#{attribute.name}"
            end
          end
        end.join(', ') -%>)
      end

    end
  end
end
