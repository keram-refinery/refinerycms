module Refinery
  module <%= class_name.pluralize %>
    class <%= class_name %> < Refinery::Core::BaseModel
<% if table_name == namespacing.underscore.pluralize -%>
      self.table_name = 'refinery_<%= plural_name %>'
<% end -%>

<% if (text_fields = attributes.map { |a| a.name if a.type == :text }.compact.uniq).any? && text_fields.detect{ |a| a.to_s == 'message' }.nil? -%>
      alias_attribute :message, :<%= text_fields.first %>
<% elsif text_fields.empty? -%>
      # def message was created automatically because you didn't specify a text field
      # when you ran the refinery:form generator. <3 <3 Refinery CMS.
      def message
        "Override def message in vendor/extensions/<%= namespacing.underscore %>/app/models/refinery/<%= namespacing.underscore %>/<%= singular_name %>.rb"
      end
<% end -%>

<% unless (string_fields = attributes.map { |a| a.name if a.type == :string }.compact.uniq).empty? || string_fields.detect { |f| f.to_s == 'name' } -%>
      alias_attribute :name, :<%= string_fields.first %>
<% end -%>
<% unless string_fields.empty? || string_fields.detect { |f| f.to_s == 'title' } -%>
      alias_attribute :title, :name
<% end -%>

      # Add some validation here if you want to validate the user's input
<% if string_fields.any?
  first_string_field, *rest_string_fields = *string_fields -%>
      # We have validated the first string field for you.
      validates :<%= first_string_field %>, presence: true, length: { maximum: Refinery::STRING_MAX_LENGTH }
<% rest_string_fields.each do |string_field| -%>
      validates :<%= string_field %>, length: { maximum: Refinery::STRING_MAX_LENGTH }
<% end -%>
<% else -%>
      # def name was created automatically because you didn't specify a string field
      # when you ran the refinery:form generator. <3 <3 Refinery CMS.
      def name
        "Override def name in vendor/extensions/<%= namespacing.underscore %>/app/models/refinery/<%= namespacing.underscore %>/<%= singular_name %>.rb"
      end
<% end -%>
<% image_attributes.each do |a| -%>

      belongs_to :<%= a.name %>, class_name: 'Refinery::Image'
<% end -%>
<% resource_attributes.each do |a| -%>

      belongs_to :<%= a.name %>, class_name: 'Refinery::Resource'
<% end -%>
<% attributes.select{ |a| /radio|select/ === a.type.to_s }.uniq.each do |a| -%>

      <%= a.name.pluralize.upcase %> = []
<% end -%>
<% if includes_spam? -%>

      scope :ham, -> { where(spam: false) }
      scope :spam, -> { where(spam: true) }

      def ham?
        !spam?
      end
<% end -%>
<% if includes_archived? -%>

      scope :fresh, -> { where(archived: false) }
      scope :archived, -> { where(archived: true) }

      def fresh?
        !archived?
      end
<% end -%>
    end
  end
end
